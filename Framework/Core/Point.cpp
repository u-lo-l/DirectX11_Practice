#include "Framework.h"
#include "Point.h"

//////////////////////////////////////////////////////////////////////////

const Point Point::Zero = Point(0, 0);

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief ������
//////////////////////////////////////////////////////////////////////////
Point::Point(void)
{
	X = 0;
	Y = 0;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief ������
///@param x : X
///@param y : Y
//////////////////////////////////////////////////////////////////////////
Point::Point(int x, int y)
{
	X = x;
	Y = y;
}

Point::operator float* ()
{
	return reinterpret_cast<float *>(P);
}

Point::operator const float* () const
{
	return reinterpret_cast<const float *>(P);
}

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief ==
///@param value2 : ����Ʈ
///@return ���
//////////////////////////////////////////////////////////////////////////
bool Point::operator==(const Point& value2) const
{
	if (X == value2.X)
		return Y == value2.Y;
	else
		return false;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief !=
///@param value2 : ����Ʈ
///@return ���
//////////////////////////////////////////////////////////////////////////
bool Point::operator!=(const Point& value2) const
{
	if (X == value2.X)
		return Y != value2.Y;
	else
		return true;
}

Vector2D Point::ToVector2()
{
	return Vector2D((float)X, (float)Y);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief ���ڿ��� ��ȯ
///@param ���ڿ�
//////////////////////////////////////////////////////////////////////////
std::wstring Point::ToString()
{
	std::wstring temp = L"";

	temp += L"X:" + std::to_wstring(X);
	temp += L",Y:" + std::to_wstring(Y);

	return temp;
}